{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","quizzes","question","answer","correct","xxx","status","score","correctAnswer","index","newStatus","this","slice","setState","length","alert","answerss","i","push","key","onClick","chooseAnswer","className","nextQuestion","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0JAAAA,EAAOC,QAAU,IAA0B,kC,qICyJ5BC,G,wBApJb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXC,QAAS,CACP,CACEC,SAAU,iDACVC,OAAQ,CAAC,MAAO,MAAO,MAAO,SAC9BC,QAAS,OAGX,CACEF,SAAU,sFACVC,OAAQ,CACN,0FACA,uEACA,qDACA,oBAEFC,QAAS,2FAEX,CACEF,SAAU,yFACVC,OAAQ,CACN,4BACA,eACA,eACA,uBAEFC,QAAS,wBAIbC,IAAK,EAELC,OAAQ,CAAC,GAAI,GAAI,GAAI,IAErBC,MAAO,GArCQ,E,0EA0CNJ,EAAQK,EAAeC,GAClC,IAAIC,EAAYC,KAAKX,MAAMM,OAAOM,QAClCF,EAAY,CAAC,GAAI,GAAI,GAAI,IAErBP,IAAWK,GACbE,EAAUD,GAAS,IACnBE,KAAKX,MAAMO,OAAS,GAEpBG,EAAUD,GAAS,IAGrBE,KAAKE,SAAS,CACZP,OAAQI,M,qCAWVC,KAAKX,MAAMM,OAAS,CAAC,GAAI,GAAI,GAAI,IACjC,IAAID,EAAMM,KAAKX,MAAMK,IACjBA,EAAMM,KAAKX,MAAMC,QAAQa,OAAS,EACpCT,GAAO,GAGPU,MAAM,kCAAkBJ,KAAKX,MAAMO,MAAQ,YAC3CF,EAAM,EACNM,KAAKX,MAAMO,MAAM,GAGnBI,KAAKE,SAAS,CACZR,IAAKA,M,+BAgBP,IAPQ,IAAD,OACDJ,EAAUU,KAAKX,MAAMC,QACrBO,EAAgBP,EAAQU,KAAKX,MAAMK,KAAKD,QAExCE,EAASK,KAAKX,MAAMM,OAEtBU,EAAW,GANR,WAOEC,GACPD,EAASE,KACP,wBACEC,IAAKF,EACLG,QAAS,kBACP,EAAKC,aACHpB,EAAQ,EAAKD,MAAMK,KAAKF,OAAOc,GAC/BT,EACAS,KAIJ,8BACGA,EAAI,EADP,IACWhB,EAAQ,EAAKD,MAAMK,KAAKF,OAAOc,IAE1C,8BAAOX,EAAOW,OAfXA,EAAI,EAAGA,EAAIhB,EAAQU,KAAKX,MAAMK,KAAKF,OAAOW,OAAQG,IAAM,EAAxDA,GAsBT,OACE,yBAAKK,UAAU,OACb,4BAAQA,UAAU,cAChB,wCACA,yBAAKA,UAAU,SACb,iDACaX,KAAKX,MAAMK,IAAM,EAD9B,IACkCM,KAAKX,MAAMC,QAAQa,QAErD,yBAAKQ,UAAU,YACZX,KAAKX,MAAMC,QAAQU,KAAKX,MAAMK,KAAKH,UAGtC,yBAAKoB,UAAU,eACb,4BAMGN,KAKP,4BAAQM,UAAU,eAAeF,QAAS,kBAAM,EAAKG,iBAArD,qC,GA5IQC,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.0fc6fcae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      quizzes: [\n        {\n          question: \"Thẻ dùng để in đậm\",\n          answer: [\"<b>\", \"<i>\", \"<p>\", \"<emp>\"],\n          correct: \"<b>\"\n        },\n\n        {\n          question: \" Thẻ <input type=”Submit” …> dùng để làm gì?\",\n          answer: [\n            \"Tạo một nút lệnh dùng để gửi tin trong form đi\",\n            \"Tạo một ô text để nhập dữ liệu\",\n            \"Tạo nút lệnh xóa thông tin form\",\n            \"Tất cả\"\n          ],\n          correct: \"Tạo một nút lệnh dùng để gửi tin trong form đi\"\n        },\n        {\n          question: \"Thẻ HTML nào dùng để tạo ra ô nhập dữ liệu\",\n          answer: [\n            \"<input type='textfield'/>\",\n            \"<textinput/>\",\n            \"<textfield/>\",\n            \"<input type='text'/\"\n          ],\n          correct: \"<input type='text'/\"\n        }\n      ],\n\n      xxx: 0,\n\n      status: [\"\", \"\", \"\", \"\"],\n\n      score: 0\n    };\n  }\n\n  // Chọn đáp án\n  chooseAnswer(answer, correctAnswer, index) {\n    let newStatus = this.state.status.slice();\n    newStatus = [\"\", \"\", \"\", \"\"];\n\n    if (answer === correctAnswer) {\n      newStatus[index] = \"V\";\n      this.state.score += 1;\n    } else {\n      newStatus[index] = \"X\";\n    }\n\n    this.setState({\n      status: newStatus\n    });\n  }\n\n\n\n\n\n// Chuyển câu\n\n  nextQuestion() {\n    this.state.status = [\"\", \"\", \"\", \"\"];\n    let xxx = this.state.xxx;\n    if (xxx < this.state.quizzes.length - 1) {\n      xxx += 1;\n      \n    } else {\n      alert(\"Trả Lời Đúng \" + this.state.score + \" câu \");\n      xxx = 0;\n      this.state.score=0;\n    }\n\n    this.setState({\n      xxx: xxx\n    });\n  }\n\n\n\n  \n\n\n  render() {\n    const quizzes = this.state.quizzes;\n    const correctAnswer = quizzes[this.state.xxx].correct;\n\n    const status = this.state.status;\n\n    let answerss = [];\n    for (let i = 0; i < quizzes[this.state.xxx].answer.length; i++) {\n      answerss.push(\n        <li\n          key={i}\n          onClick={() =>\n            this.chooseAnswer(\n              quizzes[this.state.xxx].answer[i],\n              correctAnswer,\n              i\n            )\n          }\n        >\n          <span>\n            {i + 1}.{quizzes[this.state.xxx].answer[i]}\n          </span>\n          <span>{status[i]}</span>\n        </li>\n      );\n    }\n\n\n    \n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h3>Quizz???</h3>\n          <div className=\"quizz\">\n            <h5>\n              Câu hỏi : {this.state.xxx + 1}/{this.state.quizzes.length}\n            </h5>\n            <div className=\"question\">\n              {this.state.quizzes[this.state.xxx].question}\n            </div>\n\n            <div className=\"answer-area\">\n              <ul>\n                {/* <li>Dap an 1</li>\n                  <li>Dap an 2</li>\n                  <li>Dap an 3</li>\n                  <li>Dap an 4</li> */}\n\n                {answerss}\n              </ul>\n            </div>\n          </div>\n\n          <button className=\"nextQuestion\" onClick={() => this.nextQuestion()}>\n            Chuyển câu hỏi\n          </button>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}